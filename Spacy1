

#pip install spacy
#python -m spacy download en_core_web_sm #(we have 3 type of model is available called small, medium & large)
import spacy
# What is spaCy used for?
# Natural Language Processing With spaCy in Python – Real Python
# spaCy is a free, open-source library for NLP in Python written in Cython. spaCy is designed to make it easy to build systems for information extraction or general-purpose natural language processing.
nlp = spacy.load("en_core_web_sm")
# What is the load function in spaCy?
# load function. Load a pipeline using the name of an installed package, a string path or a Path -like object. spaCy will try resolving the load argument in this order. If a pipeline is loaded from a string name, spaCy will assume it's a Python package and import it and call the package's own load() method.
doc = nlp("data science and ai has greate career ahead")
# What does NLP () do in spaCy?
# Natural Language Processing With spaCy in Python – Real Python
# NLP helps you extract insights from unstructured text and has many use cases, such as: Automatic summarization. Named-entity recognition. Question answering systems.
doc
# data science and ai has greate career ahead
for token in doc:
    print(token.text)
# data
# science
# and
# ai
# has
# greate
# career
# ahead
import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion")

for token in doc:
    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,
            token.shape_, token.is_alpha, token.is_stop)
# Apple Apple PROPN NNP nsubj Xxxxx True False
# is be AUX VBZ aux xx True True
# looking look VERB VBG ROOT xxxx True False
# at at ADP IN prep xx True True
# buying buy VERB VBG pcomp xxxx True False
# U.K. U.K. PROPN NNP dobj X.X. False False
# startup startup NOUN NN dep xxxx True False
# for for ADP IN prep xxx True True
# $ $ SYM $ quantmod $ False False
# 1 1 NUM CD compound d False False
# billion billion NUM CD pobj xxxx True False
for token in doc:
    print(token.pos_)
# NOUN
# NOUN
# CCONJ
# AUX
# VERB
# ADJ
# NOUN
# ADV
for token in doc:
    print(token.text, token.pos_)
# What is POS in spaCy?
# POS Tagging in NLP using Spacy - AskPython
# Parts of Speech (POS) are the words that perform different roles in a sentence. The English language has 8 parts of speech.    
# data NOUN
# science NOUN
# and CCONJ
# ai AUX
# has VERB
# greate ADJ
# career NOUN
# ahead ADV
for token in doc:
    print(token.text, token.pos_, token.lemma_)
text = """There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on. The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.). The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query. Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.
# collection summarization is another application example of automatic summarization. It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system. Video summarization is a related domain, where the system automatically creates a trailer of a long video. This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions. Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured """
text
# 'There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on. The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.). The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query. Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.\nAn example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document. Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic). This problem is called multi-document summarization. A related application is summarizing news articles. Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.\nImage collection summarization is another application example of automatic summarization. It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system. Video summarization is a related domain, where the system automatically creates a trailer of a long video. This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions. Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured '
import spacy
from spacy.lang.en.stop_words import STOP_WORDS
# What are the Stopwords in spaCy?
# Stop words include words like is , the , a , and , in , to , and so on. They are often considered noise in text analysis tasks because they do not carry significant information about the content or the context of the text.
from string import punctuation
stopwords = list(STOP_WORDS) 
stopwords


 

 


len(stopwords)

nlp = spacy.load('en_core_web_sm') 
text
#y relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query. Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.\nAn example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document. Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic). This problem is called multi-document summarization. A related application is summarizing news articles. Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.\nImage collection summarization is another application example of automatic summarization. It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system. Video summarization is a related domain, where the system automatically creates a trailer of a long video. This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions. Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured '
doc = nlp(text)
doc
#
tokens = [token.text for token in doc]
print(tokens) 
##when we execute everythihg we created tokens from the text & not removed any of the stopwords & didnt cleaned the data
# 'is', 'called', 'multi', '-', 'document', 'summarization', '.', 'A', 'related', 'application', 'is', 'summarizing', 'news', 'articles', '.', 'Imagine', 'a', 'system', ',', 'which', 'automatically', 'pulls', 'together', 'news', 'articles', 'on', 'a', 'given', 'topic', '(', 'from', 'the', 'web', ')', ',', 'and', 'concisely', 'represents', 'the', 'latest', 'news', 'as', 'a', 'summary', '.', '\n', 'Image', 'collection', 'summarization', 'is', 'another', 'application', 'example', 'of', 'automatic', 'summarization', '.', 'It', 'consists', 'in', 'selecting', 'a', 'representative', 'set', 'of', 'images', 'from', 'a', 'larger', 'set', 'of', 'images.[4', ']', 'A', 'summary', 'in', 'this', 'context', 'is', 'useful', 'to', 'show', 'the', 'most', 'representative', 'images', 'of', 'results', 'in', 'an', 'image', 'collection', 'exploration', 'system', '.', 'Video', 'summarization', 'is', 'a', 'related', 'domain', ',', 'where', 'the', 'system', 'automatically', 'creates', 'a', 'trailer', 'of', 'a', 'long', 'video', '.', 'This', 'also', 'has', 'applications', 'in', 'consumer', 'or', 'personal', 'videos', ',', 'where', 'one', 'might', 'want', 'to', 'skip', 'the', 'boring', 'or', 'repetitive', 'actions', '.', 'Similarly', ',', 'in', 'surveillance', 'videos', ',', 'one', 'would', 'want', 'to', 'extract', 'important', 'and', 'suspicious', 'activity', ',', 'while', 'ignoring', 'all', 'the', 'boring', 'and', 'redundant', 'frames', 'captured']
# TEAM PLEASE INSTALL FR_CORE_WEB_SM (PLEASE DONWLOAD THE STOPWONR , LEN OF THE STOPWORDS)
tokens

 

 


 
len(tokens)

#punctuation # also called as noisy characters
#'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
doc
#collection summarization is another application example of automatic summarization. It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system. Video summarization is a related domain, where the system automatically creates a trailer of a long video. This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions. Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured 
#we have to calcualte the freaquency of each and every word, how many time word is repetation in text 

word_frequencies = {}

for word in doc:
    if word.text.lower() not in stopwords:
        if word.text.lower() not in punctuation:
            if word.text not in word_frequencies.keys():
                word_frequencies[word.text] = 1
            else:
                word_frequencies[word.text] += 1
word_frequencies
#print(word_frequencies)

 
 
 
len(word_frequencies) 
#103
word_frequencies

 
 
max_frequency = max(word_frequencies.values())
max_frequency 
11
#to get normalized/weighted frequencies you should devide all frequencies with 11
for word in word_frequencies.keys():
    word_frequencies[word] = word_frequencies[word]/max_frequency
#print(word_frequencies)
word_frequencies
#this is the normalized frequencies of each word
# {'broadly': 0.09090909090909091,
#  'types': 0.09090909090909091,
#  'extractive': 0.09090909090909091,
#  'summarization': 1.0,
#  'tasks': 0.09090909090909091,
#  'depending': 0.18181818181818182,
#  'program': 0.09090909090909091,
#  'focuses': 0.18181818181818182,
#  'generic': 0.2727272727272727,
#  'obtaining': 0.09090909090909091,
#  'summary': 0.36363636363636365,
#  'abstract': 0.18181818181818182,
#  'collection': 0.2727272727272727,
#  'documents': 0.18181818181818182,
#  'sets': 0.09090909090909091,
#  'images': 0.2727272727272727,
#  'videos': 0.2727272727272727,
 

sentence_tokens = [sent for sent in doc.sents]
sentence_tokens
# [There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on.,
#  The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).,
#  The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query.,
#  Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.,
#  An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.,
#  Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic).,
#  This problem is called multi-document summarization.,
#  A related application is summarizing news articles.,
#  Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.,
#  Image collection summarization is another application example of automatic summarization.,
#  It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system.,
#  Video summarization is a related domain, where the system automatically creates a trailer of a long video.,
#  This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions.,
#  Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured]
len(sentence_tokens)
# 14
sentence_tokens
# [There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on.,
#  The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).,
#  The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query.,
#  Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.,
#  An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.,
#  Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic).,
#  This problem is called multi-document summarization.,
#  A related application is summarizing news articles.,
#  Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.,
#  Image collection summarization is another application example of automatic summarization.,
#  It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system.,
#  Video summarization is a related domain, where the system automatically creates a trailer of a long video.,
#  This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions.,
#  Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured]
# we are going to calculate the sentence score, to calculate the sentence score 
sentence_scores = {}

for sent in sentence_tokens:
    for word in sent:
        if word.text.lower() in word_frequencies.keys():
            if sent not in sentence_scores.keys():
                sentence_scores[sent] = word_frequencies[word.text.lower()]
            else:
                sentence_scores[sent] += word_frequencies[word.text.lower()]
        
sentence_scores
# {There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on.: 2.818181818181818,
#  The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).: 3.9999999999999987,
#  The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query.: 3.909090909090909,
#  Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.: 3.2727272727272716,
#  An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.: 3.9999999999999996,
#  Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic).: 2.545454545454545,
#  This problem is called multi-document summarization.: 1.8181818181818183,
#  A related application is summarizing news articles.: 1.0909090909090908,
#  Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.: 2.9090909090909087,
#  Image collection summarization is another application example of automatic summarization.: 2.909090909090909,
#  It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system.: 2.999999999999999,
#  Video summarization is a related domain, where the system automatically creates a trailer of a long video.: 2.2727272727272725,
#  This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions.: 1.1818181818181817,
#  Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured: 1.4545454545454544}
#lets say our case study was 30% sentence with maximum scores
from heapq import nlargest 
select_length = int(len(sentence_tokens)*0.2)
select_length
# 2
#we have to select maximum 4 sentences out of all sentences 
summary = nlargest(select_length,sentence_scores, key = sentence_scores.get)
summary
# [An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.,
#  The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).]
# sentence_scores
# {There are broadly two types of extractive summarization tasks depending on what the summarization program focuses on.: 2.818181818181818,
#  The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).: 3.9999999999999987,
#  The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query.: 3.909090909090909,
#  Summarization systems are able to create both query relevant text summaries and generic machine-generated summaries depending on what the user needs.: 3.2727272727272716,
#  An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.: 3.9999999999999996,
#  Sometimes one might be interested in generating a summary from a single source document, while others can use multiple source documents (for example, a cluster of articles on the same topic).: 2.545454545454545,
#  This problem is called multi-document summarization.: 1.8181818181818183,
#  A related application is summarizing news articles.: 1.0909090909090908,
#  Imagine a system, which automatically pulls together news articles on a given topic (from the web), and concisely represents the latest news as a summary.: 2.9090909090909087,
#  Image collection summarization is another application example of automatic summarization.: 2.909090909090909,
#  It consists in selecting a representative set of images from a larger set of images.[4] A summary in this context is useful to show the most representative images of results in an image collection exploration system.: 2.999999999999999,
#  Video summarization is a related domain, where the system automatically creates a trailer of a long video.: 2.2727272727272725,
#  This also has applications in consumer or personal videos, where one might want to skip the boring or repetitive actions.: 1.1818181818181817,
#  Similarly, in surveillance videos, one would want to extract important and suspicious activity, while ignoring all the boring and redundant frames captured: 1.4545454545454544}
# if i need to combine these top 3 sentencs then 

final_summary = [word.text for word in summary]
final_summary
# ['An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document.',
#  'The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).']
print(summary) # we get the final summary by our model
# [An example of a summarization problem is document summarization, which attempts to automatically produce an abstract from a given document., The first is generic summarization, which focuses on obtaining a generic summary or abstract of the collection (whether documents, or sets of images, or videos, news stories etc.).]
# client assigne this work nlp enginner -- share this text to cleint for evaluiton 
# reduce manual work 
# still pen adn paper 
# how to extra text from paper 
# chate generati ai whoud  
# RAW PAER PDF 
#-- PDF to text ( nlp techniqeu)
# image (ocr)
 
output:
data
science
and
ai
has
greate
career
ahead
Apple Apple PROPN NNP nsubj Xxxxx True False
is be AUX VBZ aux xx True True
looking look VERB VBG ROOT xxxx True False
at at ADP IN prep xx True True
buying buy VERB VBG pcomp xxxx True False
U.K. U.K. PROPN NNP dobj X.X. False False
startup startup NOUN NN dep xxxx True False
for for ADP IN prep xxx True True
$ $ SYM $ quantmod $ False False
1 1 NUM CD compound d False False
billion billion NUM CD pobj xxxx True False
PROPN
AUX
VERB
ADP
VERB
PROPN
NOUN
ADP
SYM
NUM
NUM
Apple PROPN
is AUX
looking VERB
at ADP
buying VERB
U.K. PROPN
startup NOUN
for ADP
$ SYM
1 NUM
billion NUM
Apple PROPN Apple
is AUX be
looking VERB look
at ADP at
buying VERB buy
U.K. PROPN U.K.
startup NOUN startup
for ADP for
$ SYM $
1 NUM 1
billion NUM billion
['There', 'are', 'broadly', 'two', 'types', 'of', 'extractive', 'summarization', 'tasks', 'depending', 'on', 'what', 'the', 'summarization', 'program', 'focuses', 'on', '.', 'The', 'first', 'is', 'generic', 'summarization', ',', 'which', 'focuses', 'on', 'obtaining', 'a', 'generic', 'summary', 'or', 'abstract', 'of', 'the', 'collection', '(', 'whether', 'documents', ',', 'or', 'sets', 'of', 'images', ',', 'or', 'videos', ',', 'news', 'stories', 'etc', '.', ')', '.', 'The', 'second', 'is', 'query', 'relevant', 'summarization', ',', 'sometimes', 'called', 'query', '-', 'based', 'summarization', ',', 'which', 'summarizes', 'objects', 'specific', 'to', 'a', 'query', '.', 'Summarization', 'systems', 'are', 'able', 'to', 'create', 'both', 'query', 'relevant', 'text', 'summaries', 'and', 'generic', 'machine', '-', 'generated', 'summaries', 'depending', 'on', 'what', 'the', 'user', 'needs', '.', '\n', '#', 'collection', 'summarization', 'is', 'another', 'application', 'example', 'of', 'automatic', 'summarization', '.', 'It', 'consists', 'in', 'selecting', 'a', 'representative', 'set', 'of', 'images', 'from', 'a', 'larger', 'set', 'of', 'images.[4', ']', 'A', 'summary', 'in', 'this', 'context', 'is', 'useful', 'to', 'show', 'the', 'most', 'representative', 'images', 'of', 'results', 'in', 'an', 'image', 'collection', 'exploration', 'system', '.', 'Video', 'summarization', 'is', 'a', 'related', 'domain', ',', 'where', 'the', 'system', 'automatically', 'creates', 'a', 'trailer', 'of', 'a', 'long', 'video', '.', 'This', 'also', 'has', 'applications', 'in', 'consumer', 'or', 'personal', 'videos', ',', 'where', 'one', 'might', 'want', 'to', 'skip', 'the', 'boring', 'or', 'repetitive', 'actions', '.', 'Similarly', ',', 'in', 'surveillance', 'videos', ',', 'one', 'would', 'want', 'to', 'extract', 'important', 'and', 'suspicious', 'activity', ',', 'while', 'ignoring', 'all', 'the', 'boring', 'and', 'redundant', 'frames', 'captured']
[The second is query relevant summarization, sometimes called query-based summarization, which summarizes objects specific to a query.]
