# -*- coding: utf-8 -*-
"""DATA AUGMENTATIONUntitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UbV2N4J3j6KxFSHCFe4UOhopi3Hyjqwm
"""

# !pip install tensorflow==2.4.0
# !conda activate tensorflow
# !source activate tensorflow
# !pip install tensorflow==2.14.0  # Replace with the version you want

import sys
print(sys.version)
import sys
sys.executable


# !pip install --upgrade pip
# import tensorflow as tf
# !pip install tensorflow==2.5.0  # Use a more recent version if necessary



import sys
import tensorflow
from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

# Your code using tf.keras goes here

# What is Keras preprocessing image in Python?
# Keras Preprocessing is the data preprocessing and data augmentation module of the Keras deep learning library. It provides utilities for working with image data, text data, and sequence data.
# What is Keras in image processing?
# Keras API is a deep learning library that provides methods to load, prepare and process images.
# Load an image
# Process an image
# Convert Image into an array and vice-versa
# Change the color of the image
# Process image dataset
# Load the Image
# In Keras, load_img() function is used to load image. The image loaded using load_img() method is PIL object. Certain information can be accessed from loaded images like image type which is PIL object, the format is JPEG, size is (6000,4000), mode is RGB, etc. We are using dog images throughout the article.
# Resize an Image
# We can perform certain functions on the image like resizing it, changing its color, convert into an array, etc before training any model. To resize the shape of the image, resize() method is invoked on the image. The size in which we want to convert the image should be iterable.
# Convert image into an array
# There is img_to_array() method to convert images into array, and array_to_img() method to convert image array back to image. In the below example, we are just accessing the 0th index of the image array. We can get information like image array shape, type, etc. When the image array is converted to an image, it again is a PIL object.
# Change the color of the Image
# To convert the colorful images into grayscale, just set grayscale = True in load_img() method. To save the converted images we need to convert the image into an array, otherwise the save_img() method will throw an error. After converting the image into grayscale image we see it still shows mode RGB, and the size is the same.
# Process an Image dataset
# To load the images from the image dataset, the simple method is to use load_data() on the image dataset. We are using mnist dataset which is already available in Keras. It will give in return x_train, y_train, x_test, and y_test. The x_train and y_train will be used to train the model and x_test and y_test will be used for testing purposes. We can reshape all the images inside the dataset using reshape() method, and define what type of images should be like ‘float64’ or ‘float32’.
datagen = ImageDataGenerator(
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')
# Using TensorFlow backend.
img = load_img(r"/content/DATA AUGUMENT/dogs-87a.jpg")
img

x = img_to_array(img)  # this is a Numpy array with shape (3, 150, 150)
x = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)

# the .flow() command below generates batches of randomly transformed images
# and saves the results to the `preview/` directory
i = 0
for batch in datagen.flow(x, batch_size=1,
                          save_to_dir=r"/content/DATA AUGUMENT", save_prefix='cat', save_format='jpeg'):
    i += 1
    if i > 30:
        break  # otherwise the generator would loop indefinitely