#!/usr/bin/env python
# coding: utf-8

# # MOVIE RATING ANALYTICS (ADVANCED VISULIZATION)

# In[1]:


import pandas as pd
import os
os.getcwd() # if you want to change the working directory


# In[2]:


movies = pd.read_csv(r"C:\Users\M GNANESHWARI\Desktop\Movie-Rating.csv")


# In[3]:


movies.head()


# In[4]:


movies.tail()


# In[5]:


movies.columns


# In[6]:


movies.info()


# In[8]:


movies.describe() 
# if you look at the year the data type is int but when you look at the mean value it showing 2009 which is meaningless
# we have to change to categroy type 
# also from object datatype we will convert to category datatypes
#


# In[9]:


movies['Film']
#movies['Audience Ratings %']


# In[10]:


movies.Film


# In[11]:


movies.Film = movies.Film.astype('category')


# In[12]:


movies.Film


# In[13]:


movies.head()


# In[14]:


movies.info()


# In[23]:


movies.Genre = movies.Genre.astype('category')
movies["Year of release"] = movies["Year of release"].astype('category')
movies.Genre


# In[24]:


movies["Year of release"]


# In[25]:


movies.info()


# In[26]:


movies.Genre.cat.categories


# In[27]:


movies.describe() 
#now when you see the describt you will get only integer value mean, standard deviation which is meaning full


# In[28]:


movies


# In[29]:


# How to working with joint plots
from matplotlib import pyplot as plt
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')


#  basically joint plot is a scatter plot & it find the relation b/w audiene & critics
# â€¢ also if you look up you can find the uniform distribution (critics)and normal distriution 
# (audience)

# In[31]:


j = sns.jointplot( data = movies, x = 'CriticRating', y ='AudienceRating')
# Audience rating is more dominant then critics rating
# Based on this we find out as most people are most liklihood to watchaudience rating & less likely to wathc critics rating
# let me explain the excel - if you filter audience rating & critic rating. critic rating has very low values compare to audience rating


# In[94]:


j = sns.jointplot( data = movies, x = 'CriticRating', y ='AudienceRating', kind='hex')
#j = sns.jointplot( data = movies, x = 'CriticRating', y = 'AudienceRating', kind='reg')


# In[92]:


#Histograms
# <<< chat1
m1 = sns.distplot(movies.AudienceRating)
#y - axis generated by seaborn automatically that is the powefull of seaborn gallery


# In[93]:


movies.columns


# In[39]:


movies.columns = ['Film', 'Genre', 'CriticRating', 
'AudienceRating','BudgetMillions','Year']
movies.head() # Removed spaces & % removed noise characters


# In[40]:


movies.info()


# In[42]:


movies.describe() 
# if you look at the year the data type is int but when you look at the mean value it showing 2009 which is meaningless
# we have to change to categroy type 
# also from object datatype we will convert to category datatypes
#


# In[43]:


movies['Film']
#movies['Audience Ratings %']


# In[45]:


j = sns.jointplot( data = movies, x = 'CriticRating', y = 'AudienceRating')
# Audience rating is more dominant then critics rating
# Based on this we find out as most people are most liklihood to watch audience rating & less likely to wathc critics rating
# let me explain the excel - if you filter audience rating & critic rating. critic rating has very low values compare to audience rating


# In[47]:


j = sns.jointplot( data = movies, x = 'CriticRating', y ='AudienceRating', kind='hex')
#j = sns.jointplot( data = movies, x = 'CriticRating', y = 'AudienceRating', kind='reg')


# In[48]:


#Histograms
# <<< chat1
m1 = sns.distplot(movies.AudienceRating)
#y - axis generated by seaborn automatically that is the powefull of seaborn gallery


# In[49]:


sns.set_style('darkgrid')
m2 = sns.distplot(movies.AudienceRating, bins = 15)


# In[50]:


#sns.set_style('darkgrid')
n1 = plt.hist(movies.AudienceRating, bins=15)


# In[51]:


sns.set_style('white') #normal distribution & called as bell curve
n1 = plt.hist(movies.AudienceRating, bins=20)


# In[52]:


n1 = plt.hist(movies.CriticRating, bins=20) #uniform distribution


# In[53]:


# <<< chat - 2
# Creating stacked histograms & this is bit tough to understand
#h1 = plt.hist(movies.BudgetMillions)
plt.hist(movies.BudgetMillions)
plt.show()


# In[54]:


plt.hist(movies[movies.Genre == 'Drama'].BudgetMillions)
plt.show()


# In[55]:


movies.head()


# In[56]:


#movies.Genre.unique()
# Below plots are stacked histogram becuase overlaped
plt.hist(movies[movies.Genre == 'Action'].BudgetMillions, bins = 20)
plt.hist(movies[movies.Genre == 'Thriller'].BudgetMillions, bins = 20)
plt.hist(movies[movies.Genre == 'Drama'].BudgetMillions, bins = 20)
plt.legend()
plt.show()


# In[57]:


plt.hist([movies[movies.Genre == 'Action'].BudgetMillions, movies[movies.Genre == 'Drama'].BudgetMillions,  movies[movies.Genre == 'Thriller'].BudgetMillions,  movies[movies.Genre == 'Comedy'].BudgetMillions],
 bins = 20, stacked = True)
plt.show()


# In[59]:


# if you have 100 categories you cannot copy & paste all the things
for gen in movies.Genre.cat.categories:
 print(gen)


# In[60]:


vis1 = sns.lmplot(data=movies, x='CriticRating', y='AudienceRating', fit_reg=False)


# In[61]:


vis1 = sns.lmplot(data=movies, x='CriticRating', y='AudienceRating', fit_reg=False, hue = 'Genre')


# In[62]:


vis1 = sns.lmplot(data=movies, x='CriticRating', y='AudienceRating', fit_reg=False, hue = 'Genre', size = 10,aspect=1)


# In[64]:


# Kernal Density Estimate plot ( KDE PLOT) 
# how can i visulize audience rating & critics rating . using scatterplot
k1 = sns.kdeplot(movies.CriticRating,movies.AudienceRating)
# where do u find more density and how density is distibuted across from the the chat 
# center point is kernal this is calld KDE & insteade of dots it visualize like this
# we can able to clearly see the spread at the audience ratings


# In[65]:


k1 = sns.kdeplot(movies.CriticRating,movies.AudienceRating,shade =
True,shade_lowest=False,cmap='Reds')


# In[67]:


k2 =sns.kdeplot(movies.CriticRating,movies.AudienceRating,shade_lowest=False,cmap='Greens_r')


# In[68]:


sns.set_style('dark')
k1 =sns.kdeplot(movies.BudgetMillions,movies.AudienceRating,shade_lowest=False,cmap='Greens_r')


# In[70]:


sns.set_style('dark')
k1 = sns.kdeplot(movies.BudgetMillions,movies.AudienceRating)


# In[71]:


k2 = sns.kdeplot(movies.BudgetMillions,movies.CriticRating)


# In[72]:


#subplots
f, ax = plt.subplots(1,2, figsize =(12,6))
#f, ax = plt.subplots(3,3, figsize =(12,6))


# In[73]:


f, axes = plt.subplots(1,2, figsize =(12,6))
k1 =sns.kdeplot(movies.BudgetMillions,movies.AudienceRating,ax=axes[0])
k2 = sns.kdeplot(movies.BudgetMillions,movies.CriticRating,ax =
axes[1])


# In[77]:


#Box plots - 
w = sns.boxplot(data=movies, x='Genre', y = 'CriticRating')


# In[78]:


#violin plot
z = sns.violinplot(data=movies, x='Genre', y = 'CriticRating')


# In[79]:


w1 = sns.boxplot(data=movies[movies.Genre == 'Drama'], x='Year', y =
'CriticRating')


# In[80]:


z = sns.violinplot(data=movies[movies.Genre == 'Drama'], x='Year', y =
'CriticRating')


# In[81]:


# Createing a Facet grid
g =sns.FacetGrid (movies, row = 'Genre', col = 'Year', hue = 'Genre') 
#kind of subplots


# In[82]:


plt.scatter(movies.CriticRating,movies.AudienceRating)


# In[83]:


g =sns.FacetGrid (movies, row = 'Genre', col = 'Year', hue = 'Genre')
g = g.map(plt.scatter, 'CriticRating', 'AudienceRating' ) 
#scatterplots are mapped in facetgrid


# In[85]:


# you can populated any type of chat. 
g =sns.FacetGrid (movies, row = 'Genre', col = 'Year', hue = 'Genre')
g = g.map(plt.hist, 'BudgetMillions') #scatterplots are mapped in facetgrid


# In[86]:


#
g =sns.FacetGrid (movies, row = 'Genre', col = 'Year', hue = 'Genre')
kws = dict(s=50, linewidth=0.5,edgecolor='black')
g = g.map(plt.scatter, 'CriticRating', 'AudienceRating',**kws ) 
#scatterplots are mapped in facetgrid


# In[88]:


# python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)
sns.set_style('darkgrid')
f, axes = plt.subplots (2,2, figsize = (15,15))
k1 =sns.kdeplot(movies.BudgetMillions,movies.AudienceRating,ax=axes[0,0])
k2 = sns.kdeplot(movies.BudgetMillions,movies.CriticRating,ax =
axes[0,1])
k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))
z = sns.violinplot(data=movies[movies.Genre=='Drama'], x='Year', y =
'CriticRating', ax=axes[1,0])
k4 = sns.kdeplot(movies.CriticRating,movies.AudienceRating,shade =
True,shade_lowest=False,cmap='Reds',ax=axes[1,1])
k4b = sns.kdeplot(movies.CriticRating, 
movies.AudienceRating,cmap='Reds',ax = axes[1,1])
plt.show()


# In[89]:


# How can you style your dashboard using different color map
# python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)
sns.set_style('dark',{'axes.facecolor':'black'})
f, axes = plt.subplots (2,2, figsize = (15,15))
#plot [0,0]
k1 = sns.kdeplot(movies.BudgetMillions,movies.AudienceRating,  shade = True, shade_lowest=True,cmp = 'inferno',  ax = axes[0,0])
k1b = sns.kdeplot(movies.BudgetMillions, movies.AudienceRating,  cmap = 'cool',ax = axes[0,0])


# In[91]:


#plot [0,1]
k2 = sns.kdeplot(movies.BudgetMillions,movies.CriticRating, shade=True, shade_lowest=True, cmap='inferno', ax = axes[0,1])
k2b = sns.kdeplot(movies.BudgetMillions,movies.CriticRating, cmap = 'cool', ax = axes[0,1])
#plot[1,0]
z = sns.violinplot(data=movies[movies.Genre=='Drama'],  x='Year', y = 'CriticRating', ax=axes[1,0])
#plot[1,1]
k4 = sns.kdeplot(movies.CriticRating,movies.AudienceRating,  shade = True,shade_lowest=False,cmap='Blues_r',  ax=axes[1,1])
k4b = sns.kdeplot(movies.CriticRating, movies.AudienceRating,  cmap='gist_gray_r',ax = axes[1,1])
k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))
plt.show()


# Final discussion what we learn so far - 1> category datatype in python 2> jointplots 3> histogram
# 4> stacked histograms 5> Kde plot 6> subplot 7> violin plots 8> Factet grid 9> Building 
# dashboards
# # eda is completed
